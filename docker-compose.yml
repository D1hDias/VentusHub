services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ventushub-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ventushub
      POSTGRES_USER: ventushub_user
      POSTGRES_PASSWORD: ventushub_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - ventushub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ventushub_user -d ventushub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # VentusHub Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ventushub-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://ventushub_user:ventushub_password@db:5432/ventushub
      JWT_SECRET: ${JWT_SECRET:-9271e28169900e8c0246937d9a7ffd6d}
      SESSION_SECRET: ${SESSION_SECRET:-042d81233780d9acd6b8f6f04577e0b5}
      VITE_SUPABASE_URL: ${VITE_SUPABASE_URL}
      VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      - uploads_data:/app/uploads
    networks:
      - ventushub-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); http.get('http://localhost:5000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ventushub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ventushub-network
    depends_on:
      - app
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  ventushub-network:
    driver: bridge